<?
error_reporting (E_ALL ^ E_NOTICE);
require_once "../classes/clsDataConn.php";
require_once "../classes/clsLogin.php";
require_once "../classes/clsAdmin.php";
require_once "../classes/clsImage.php";


$login = new Login();
$logged_in = $login->validate();

if (! $logged_in) {
	header ("Location: index.php");
	exit(0);
}

$imageID = $_POST["iid"];
$imageType = $_POST["type"];
$imageField = $_POST["field"];
if (strlen($imageType) < 1) {
	$imageID = $_GET["iid"];//the actual image id from the images table
	$imageType = $_GET["type"];//where is this image going eg. about_us, index_side, index_center, etc
	$imageField = $_GET["field"];//this is used for the page level tables i.e. right_center_1_id in index_page table)
}

//echo "imageID: _" . $imageID . "_<BR>";
//echo "imageType: _" . $imageType . "_<BR>";
//echo "imageField: _" . $imageField . "_<BR>";

//these variables control the image sizes being created below 
//they are separated slightly oddly due to the way the code below is written
//the numbers in the "set" case should match the numbers from the "s" and "l" cases

//$create_set should have a better name
//it is used on past_sales and auction photos where the images can be portrait 
//or landscape.  The images on about_us, and the index page are in fixed width
//columns so we fix the width to the cloumn width and let the height scale

switch ($imageType) {
	case "about_us":
		$create_set = false;
		$image_width_new = 250;
		$image_table = "about_us_page";
		$image_directory_path = "/home/htmldocs/southernvtauction/images/";
		break;
	case "index_side":
		$create_set = false;
		$image_width_new = 176;
		$image_table = "index_page";
		$image_directory_path = "/home/htmldocs/southernvtauction/images/";
		break;
	case "index_center":
		$create_set = false;
		$image_width_new = 183;
		$image_table = "index_page";
		$image_directory_path = "/home/htmldocs/southernvtauction/images/";
		break;
	case "past_sales":
		$create_set = true;
		$image_longest_side_small = 120;
		$image_longest_side_large = 500;
		$image_table = "past_sales_page";
		$image_directory_path = "/home/htmldocs/southernvtauction/images/";
		break;
	case "current":
		$create_set = true;
		$image_longest_side_small = 120;
		$image_longest_side_large = 500;
		$image_table = "images";
		$image_directory_path = "/home/htmldocs/southernvtauction/images/auction/";
		break;
	default:
		$badData = true;
}


$tempPath="/tmp/";

$cls_image = new Image();
//$arr_data = $cls_image->index_select();


if (empty($_FILES['userfile']['tmp_name'])) {
	f_output_error("File not received");
} else {
			
	//These are autogenerated variables named after the form field that submitted the image
	//that contain information about the uploaded file
		/*
		$_FILES['userfile']['name']
		The original name of the file on the client machine. 
		
		$_FILES['userfile']['type']
		The mime type of the file, if the browser provided this information. An example would be "image/gif". This mime type is however not checked on the PHP side and therefore don't take its value for granted. 
		
		$_FILES['userfile']['size']
		The size, in bytes, of the uploaded file. 
		
		$_FILES['userfile']['tmp_name']
		The temporary filename of the file in which the uploaded file was stored on the server. 
		
		$_FILES['userfile']['error']
		The error code associated with this file upload. This element was added in PHP 4.2.0 
		*/
	
	
	// Was a file uploaded?
	if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {
		
		$upload_falied = false;
		
		$str_time = time();//we will prepend this to the file name to assure that we never have dups or overwriting probelms
		
		//security measures
		$filename_cleaned = $cls_image->clean($_FILES['userfile']['name'], 50);
		if ($_FILES['userfile']['type'] != "image/jpeg" && $_FILES['userfile']['type'] != "image/jpg") {//&& $_FILES['userfile']['type'] != "image/gif"
			unlink($_FILES['userfile']['tmp_name']); //original file
			echo "Invalid image type (" . $userfile_type . "). Only GIF and JPG are allowed.";
			exit;
		}
		
		//move the uploaded file somewhere known so we can read its properties
			move_uploaded_file($_FILES['userfile']['tmp_name'], $tempPath.$filename_cleaned); //safer than copy()?
			$arr_uploaded_image_size = getimagesize ($tempPath.$filename_cleaned);
				/*Returns an array with 4 elements. Index 0 contains the width of the 
				image in pixels. Index 1 contains the height. Index 2 a flag indicating 
				the type of the image. 1 = GIF, 2 = JPG, 3 = PNG, 4 = SWF, 5 = PSD, 
				6 = BMP, 7 = TIFF(intel byte order), 8 = TIFF(motorola byte order, 
				9 = JPC, 10 = JP2, 11 = JPX, 12 = JB2, 13 = SWC, 14 = IFF. These values 
				correspond to the IMAGETYPE constants that were added in PHP 4.3. 
				Index 3 is a text string with the correct height="yyy" width="xxx" string 
				that can be used directly in an IMG tag. */
			$uploaded_image_width = $arr_uploaded_image_size[0]; //imagesx($userfile);
				//echo "uploaded_image_width: " . $uploaded_image_width . "<BR>";
			$uploaded_image_height = $arr_uploaded_image_size[1]; //imagesy($userfile);
				//echo "uploaded_image_height: " . $uploaded_image_height . "<BR>";
				//echo "userfile: " . $userfile . "<BR>";
				//echo "userfile_name: " . $userfile_name . "<BR>";
				//echo "userfile_tmp_name: " . $userfile_tmp_name . "<BR>";
				//echo "userfile_size: " . $userfile_size . "<BR>";
				//echo "userfile_type: " . $userfile_type . "<BR>";
		
		//this if works but the logic isn't great. See not above regarding $create_set
		if($create_set === true) { //save the large as is and create a small and a medium from it
			
			//get the resource ID of the source image
				$uploaded_file_id = imageCreateFromJpeg($tempPath.$filename_cleaned); 
					
			//echo "image_height_new _" . $image_height_new . "_<BR>";
			//echo "image_width_new _" . $image_width_new . "_<BR>";
			//echo "uploaded_image_width _" . $uploaded_image_width . "_<BR>";
			//echo "uploaded_image_height _" . $uploaded_image_height . "_<BR>";
			
				
			//create the resized image (normal)
				$str_resized_dimensions = $cls_image->f_get_new_image_height($uploaded_image_width,$uploaded_image_height,$image_longest_side_large);
				list($image_width_new, $image_height_new) = split("-", $str_resized_dimensions, 2);
				
				$resized_image_filename = $str_time . $filename_cleaned;//leave the name the same as what they uploaded
				$resized_image_id = imagecreatetruecolor($image_width_new,$image_height_new) or die ("Cannot Initialize new GD image stream");
				imagecopyresampled ($resized_image_id,$uploaded_file_id,0,0,0,0,$image_width_new,$image_height_new,$uploaded_image_width,$uploaded_image_height); //first two params are resource IDs
				imagejpeg($resized_image_id,$image_directory_path.$resized_image_filename); //write the image to a file
				imagedestroy ($resized_image_id); //image pointer not path
			
			//echo "1image_width_new _" . $image_width_new . "_<BR>";
			//echo "1image_height_new _" . $image_height_new . "_<BR>";
			//echo "1uploaded_image_width _" . $uploaded_image_width . "_<BR>";
			//echo "1uploaded_image_height _" . $uploaded_image_height . "_<BR>";
			
			//create the resized image (thumb)
				$str_resized_dimensions = $cls_image->f_get_new_image_height($uploaded_image_width,$uploaded_image_height,$image_longest_side_small);
				list($image_width_new, $image_height_new) = split("-", $str_resized_dimensions, 2);
				
				$resized_image_filename = "t_" . $str_time . $filename_cleaned;//prepend a "t_" to the image name for thumbnail
				$resized_image_id = imagecreatetruecolor($image_width_new,$image_height_new) or die ("Cannot Initialize new GD image stream");
				imagecopyresampled ($resized_image_id,$uploaded_file_id,0,0,0,0,$image_width_new,$image_height_new,$uploaded_image_width,$uploaded_image_height); //first two params are resource IDs
				imagejpeg($resized_image_id,$image_directory_path.$resized_image_filename); //write the image to a file
				imagedestroy ($resized_image_id); //image pointer not path
			
			//echo "2image_width_new _" . $image_width_new . "_<BR>";
			//echo "2image_height_new _" . $image_height_new . "_<BR>";
			//echo "2uploaded_image_width _" . $uploaded_image_width . "_<BR>";
			//echo "2uploaded_image_height _" . $uploaded_image_height . "_<BR>";


			//handle the new and the image being replaced and sync the page level table if there is one
				if ($imageType != "current") {
					//store the resized file info the images table
						$new_image_id = $cls_image->f_insert_image_into_image_table ($str_time.$filename_cleaned, $caption);//database id from images table
			
					//read the relevant old image id so we can delete the image
						$old_image_id = $cls_image->f_get_page_image_id ($image_table, $imageField);//the id of the image that was being used by this table
						if ($old_image_id != 0) {
							//delete the old image fom the images table
							$cls_image->f_delete_image ($old_image_id);
						}
						
					//store the resized file id in the relevant table
						$cls_image->f_update_image_id ($image_table, $imageField, $new_image_id);
				} else {
					//store the resized file info the images table
						$new_image_id = $cls_image->f_insert_image_into_image_table ($str_time.$filename_cleaned, $caption, 1);//database id from images table
					
					if ($imageID != "0") {
						$cls_image->f_delete_image ($imageID);
					}
				}
					
			//cleanup the images
				imagedestroy ($uploaded_file_id); //image ID not path
				unlink($tempPath.$filename_cleaned); //original file
				//unlink($new_image_normal_filename); //normal file
				//unlink($new_image_thumb_filename); //thumb file			
				
		} else { //just do the one specified image
			//open the uploaded file
				$uploaded_file_id = imageCreateFromJpeg($tempPath.$filename_cleaned);
				
		
			//echo "image_height_new _" . $image_height_new . "_<BR>";
			//echo "image_width_new _" . $image_width_new . "_<BR>";
			//echo "uploaded_image_width _" . $uploaded_image_width . "_<BR>";
			//echo "uploaded_image_height _" . $uploaded_image_height . "_<BR>";
			
				
			//create the resized image
				$image_height_new = $cls_image->f_get_new_image_height_for_fixed_width($uploaded_image_width,$uploaded_image_height,$image_width_new);
				$resized_image_filename = $str_time . $filename_cleaned;//leave the name the same as what they uploaded
				$resized_image_id = imagecreatetruecolor($image_width_new,$image_height_new) or die ("Cannot Initialize new GD image stream");
				imagecopyresampled ($resized_image_id,$uploaded_file_id,0,0,0,0,$image_width_new,$image_height_new,$uploaded_image_width,$uploaded_image_height); //first two params are resource IDs
				imagejpeg($resized_image_id,$image_directory_path.$resized_image_filename); //write the image to a file
				imagedestroy ($resized_image_id); //image pointer not path
				
			//store the resized file info the images table
				$new_image_id = $cls_image->f_insert_image_into_image_table ($str_time.$filename_cleaned, $caption);//database id from images table
				
			//read the relevant old image id so we can delete the image
				$old_image_id = $cls_image->f_get_page_image_id ($image_table, $imageField);//the id of the image that was being used by this table
				if ($old_image_id != 0) {
					//delete the old image fom the images table
					$cls_image->f_delete_image ($old_image_id);
				}
				
			//store the resized file id the relevant table
				$cls_image->f_update_image_id ($image_table, $imageField, $new_image_id);
			
			//Cleanup
				imagedestroy ($uploaded_file_id); //image ID not path
				unlink($tempPath.$filename_cleaned); //original file
		}
	} else {
		$upload_falied = true;
		//might want to do something to the location field here
		//but for now just leave it as it was before the failed upload
	}
}


if ($upload_falied == true) {
	header("Location: image_receipt.php?status=F&iid=$imageID&type=$imageType&field=$imageField");
} else {
	header("Location: image_receipt.php?status=T&iid=$new_image_id&type=$imageType&field=$imageField");
}


function f_output_error($str_error) {?>
		<html>
		<head>
	      <title>Upload failed</title>
	    </head>
	    <table align="center" cellpadding=2 cellspacing=2 width=500>
	    <tr>
	       <td><?=$str_error?></td>
	    </tr>
	    </table>
	    </body>
	    </html>
	<? exit;
}
?>
